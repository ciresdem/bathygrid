import numpy as np
from bathygrid.tile import Tile, SRTile


x = np.arange(0, 1000, 100, dtype=np.float64)
y = np.arange(0, 1000, 100, dtype=np.float64)
x, y = np.meshgrid(x, y)
x = x.ravel()
y = y.ravel()
z = np.linspace(20, 30, num=x.size).astype(np.float32)
unc = np.linspace(1, 2, num=x.size).astype(np.float32)

dtyp = [('x', np.float64), ('y', np.float64), ('z', np.float32), ('unc', np.float32)]
data = np.empty(len(x), dtype=dtyp)
data['x'] = x
data['y'] = y
data['z'] = z
data['unc'] = unc


def test_tile_setup():
    til = Tile(0.0, 0.0, 1024)
    assert til.is_empty

    til.add_points(data, 'test1')
    assert til.data.size == 100
    assert til.container == {'test1': [0, 100]}
    assert not til.is_empty

    assert til.min_x == 0
    assert til.max_x == 1024
    assert til.min_y == 0
    assert til.max_y == 1024

    assert til.width == 1024
    assert til.height == 1024
    assert til.name == '0.0_0.0'

    assert not til.cells
    assert not til.cell_edges_x
    assert not til.cell_edges_y
    assert not til.cell_indices

    til.remove_points('test1')
    assert til.is_empty


def test_tile_newgrid():
    til = Tile(0.0, 0.0, 1024)
    til.new_grid(8, 'mean')

    assert til.cells[8]['depth'].shape == (1024 / 8, 1024 / 8)
    assert til.cell_edges_x[8][0] == 0
    assert til.cell_edges_x[8][-1] == 1024
    assert til.cell_edges_y[8][0] == 0
    assert til.cell_edges_y[8][-1] == 1024

    assert np.isnan(til.cells[8]['depth'][0][0])
    assert np.isnan(til.cells[8]['uncertainty'][0][0])


def test_tile_addpoints():
    til = Tile(0.0, 0.0, 1024)
    til.add_points(data, 'test1')

    assert np.array_equal(data, til.data)
    assert til.container == {'test1': [0, 100]}


def test_tile_single_resolution():
    til = SRTile(0.0, 0.0, 1024)
    til.add_points(data, 'test1')
    til.grid(128.0, 'mean')

    assert til.cells[128.0]['depth'].shape == (1024 / 128, 1024 / 128)
    assert np.array_equal(til.cells[128.0]['depth'], np.array([[20.0, 20.101, 20.202, 20.303, 20.404, 20.505, 20.606, 20.707],
                                                               [20.808, 20.909, 21.010, 21.111, 21.212, 21.313, 21.414, 21.515],
                                                               [21.616, 21.717, 21.818, 21.919, 22.020, 22.121, 22.222, 22.323],
                                                               [22.424, 22.525, 22.626, 22.727, 22.828, 22.929, 23.030, 23.131],
                                                               [23.232, 23.333, 23.434, 23.535, 23.636, 23.737, 23.838, 23.939],
                                                               [24.040, 24.141, 24.242, 24.343, 24.444, 24.545, 24.646, 24.747],
                                                               [24.848, 24.949, 25.051, 25.152, 25.253, 25.354 , 25.455, 25.556],
                                                               [25.657, 25.758, 25.859, 25.960, 26.061, 26.162, 26.263, 26.364]]))
    assert np.array_equal(til.cells[128.0]['uncertainty'], np.array([[1.0, 1.01, 1.02, 1.03, 1.04, 1.051, 1.061, 1.071],
                                                                     [1.081, 1.091, 1.101, 1.111, 1.121, 1.131, 1.141, 1.152],
                                                                     [1.162, 1.172, 1.182, 1.192, 1.202, 1.212, 1.222, 1.232],
                                                                     [1.242, 1.253, 1.263, 1.273, 1.283, 1.293, 1.303, 1.313],
                                                                     [1.323, 1.333, 1.343, 1.354, 1.364, 1.374, 1.384, 1.394],
                                                                     [1.404, 1.414, 1.424, 1.434, 1.444, 1.455, 1.465, 1.475],
                                                                     [1.485, 1.495, 1.505, 1.515, 1.525, 1.535, 1.545, 1.556],
                                                                     [1.566, 1.576, 1.586, 1.596, 1.606, 1.616, 1.626, 1.636]]))
    assert np.array_equal(til.cell_indices[128.0], np.array([0, 0, 1, 2, 3, 3, 4, 5, 6, 7, 0, 0, 1, 2, 3, 3, 4,
                                                             5, 6,  7,  8,  8,  9, 10, 11, 11, 12, 13, 14, 15, 16, 16, 17, 18,
                                                             19, 19, 20, 21, 22, 23, 24, 24, 25, 26, 27, 27, 28, 29, 30, 31, 24,
                                                             24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 35, 36, 37,
                                                             38, 39, 40, 40, 41, 42, 43, 43, 44, 45, 46, 47, 48, 48, 49, 50, 51,
                                                             51, 52, 53, 54, 55, 56, 56, 57, 58, 59, 59, 60, 61, 62, 63]))


def test_cell_indices_modification():
    til = SRTile(0.0, 0.0, 1024)
    til.add_points(data, 'test1')
    assert not til.cell_indices
    til.grid(128.0, 'mean')
    assert np.array_equal(til.cell_indices[128.0], np.array([0, 0, 1, 2, 3, 3, 4, 5, 6, 7, 0, 0, 1, 2, 3, 3, 4,
                                                             5, 6, 7, 8, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16, 16, 17, 18,
                                                             19, 19, 20, 21, 22, 23, 24, 24, 25, 26, 27, 27, 28, 29, 30, 31, 24,
                                                             24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 35, 36, 37,
                                                             38, 39, 40, 40, 41, 42, 43, 43, 44, 45, 46, 47, 48, 48, 49, 50, 51,
                                                             51, 52, 53, 54, 55, 56, 56, 57, 58, 59, 59, 60, 61, 62, 63]))
    til.remove_points('test1')
    assert not til.cell_indices[128.0].any()
    til.add_points(data, 'test1')
    assert np.array_equal(til.cell_indices[128.0], np.array([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))
    til.grid(128.0, 'mean')
    assert np.array_equal(til.cell_indices[128.0], np.array([0, 0, 1, 2, 3, 3, 4, 5, 6, 7, 0, 0, 1, 2, 3, 3, 4,
                                                             5, 6, 7, 8, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16, 16, 17, 18,
                                                             19, 19, 20, 21, 22, 23, 24, 24, 25, 26, 27, 27, 28, 29, 30, 31, 24,
                                                             24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 35, 36, 37,
                                                             38, 39, 40, 40, 41, 42, 43, 43, 44, 45, 46, 47, 48, 48, 49, 50, 51,
                                                             51, 52, 53, 54, 55, 56, 56, 57, 58, 59, 59, 60, 61, 62, 63]))


def test_cell_indices_append():
    til = SRTile(0.0, 0.0, 1024)
    til.add_points(data, 'test1')
    til.grid(128.0, 'mean')
    assert np.array_equal(til.cell_indices[128.0], np.array([0, 0, 1, 2, 3, 3, 4, 5, 6, 7, 0, 0, 1, 2, 3, 3, 4,
                                                             5, 6, 7, 8, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16, 16, 17, 18,
                                                             19, 19, 20, 21, 22, 23, 24, 24, 25, 26, 27, 27, 28, 29, 30, 31, 24,
                                                             24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 35, 36, 37,
                                                             38, 39, 40, 40, 41, 42, 43, 43, 44, 45, 46, 47, 48, 48, 49, 50, 51,
                                                             51, 52, 53, 54, 55, 56, 56, 57, 58, 59, 59, 60, 61, 62, 63]))
    til.add_points(data, 'test2')
    assert np.array_equal(til.cell_indices[128.0], np.array([0, 0, 1, 2, 3, 3, 4, 5, 6, 7, 0, 0, 1, 2, 3, 3, 4,
                                                             5, 6, 7, 8, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16, 16, 17, 18,
                                                             19, 19, 20, 21, 22, 23, 24, 24, 25, 26, 27, 27, 28, 29, 30, 31, 24,
                                                             24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 35, 36, 37,
                                                             38, 39, 40, 40, 41, 42, 43, 43, 44, 45, 46, 47, 48, 48, 49, 50, 51,
                                                             51, 52, 53, 54, 55, 56, 56, 57, 58, 59, 59, 60, 61, 62, 63,
                                                             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))
    til.grid(128.0, 'mean')
    assert np.array_equal(til.cell_indices[128.0], np.array([0, 0, 1, 2, 3, 3, 4, 5, 6, 7, 0, 0, 1, 2, 3, 3, 4,
                                                             5, 6, 7, 8, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16, 16, 17, 18,
                                                             19, 19, 20, 21, 22, 23, 24, 24, 25, 26, 27, 27, 28, 29, 30, 31, 24,
                                                             24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 35, 36, 37,
                                                             38, 39, 40, 40, 41, 42, 43, 43, 44, 45, 46, 47, 48, 48, 49, 50, 51,
                                                             51, 52, 53, 54, 55, 56, 56, 57, 58, 59, 59, 60, 61, 62, 63, 0, 0,
                                                             1, 2, 3, 3, 4, 5, 6, 7, 0, 0, 1, 2, 3, 3, 4, 5, 6,
                                                             7, 8, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 19,
                                                             20, 21, 22, 23, 24, 24, 25, 26, 27, 27, 28, 29, 30, 31, 24, 24, 25,
                                                             26, 27, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 35, 36, 37, 38, 39,
                                                             40, 40, 41, 42, 43, 43, 44, 45, 46, 47, 48, 48, 49, 50, 51, 51, 52,
                                                             53, 54, 55, 56, 56, 57, 58, 59, 59, 60, 61, 62, 63]))
    til.remove_points('test1')
    assert np.array_equal(til.cell_indices[128.0], np.array([0, 0, 1, 2, 3, 3, 4, 5, 6, 7, 0, 0, 1, 2, 3, 3, 4,
                                                             5, 6, 7, 8, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16, 16, 17, 18,
                                                             19, 19, 20, 21, 22, 23, 24, 24, 25, 26, 27, 27, 28, 29, 30, 31, 24,
                                                             24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 35, 36, 37,
                                                             38, 39, 40, 40, 41, 42, 43, 43, 44, 45, 46, 47, 48, 48, 49, 50, 51,
                                                             51, 52, 53, 54, 55, 56, 56, 57, 58, 59, 59, 60, 61, 62, 63]))