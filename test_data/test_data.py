import os
import numpy as np
from bathygrid.utilities import remove_with_permissionserror

x = np.arange(0, 1000, 100, dtype=np.float64)
y = np.arange(0, 1000, 100, dtype=np.float64)
x, y = np.meshgrid(x, y)
x = x.ravel()
y = y.ravel()
z = np.linspace(20, 30, num=x.size).astype(np.float32)
tvu = np.linspace(1, 2, num=x.size).astype(np.float32)
thu = np.linspace(0.5, 1, num=x.size).astype(np.float32)

dtyp = [('x', np.float64), ('y', np.float64), ('z', np.float32), ('tvu', np.float32), ('thu', np.float32)]
smalldata = np.empty(len(x), dtype=dtyp)
smalldata['x'] = x
smalldata['y'] = y
smalldata['z'] = z
smalldata['tvu'] = tvu
smalldata['thu'] = thu

x = np.arange(0, 5000, 100, dtype=np.float64)
y = np.arange(50000, 55000, 100, dtype=np.float64)
x, y = np.meshgrid(x, y)
x = x.ravel()
y = y.ravel()
z = np.linspace(20, 30, num=x.size).astype(np.float32)
tvu = np.linspace(1, 2, num=x.size).astype(np.float32)
thu = np.linspace(0.5, 1, num=x.size).astype(np.float32)

smalldata2 = np.empty(len(x), dtype=dtyp)
smalldata2['x'] = x
smalldata2['y'] = y
smalldata2['z'] = z
smalldata2['tvu'] = tvu
smalldata2['thu'] = thu

x = np.arange(3000, 8000, 100, dtype=np.float64)
y = np.arange(52000, 57000, 100, dtype=np.float64)
x, y = np.meshgrid(x, y)
x = x.ravel()
y = y.ravel()
z = np.linspace(20, 30, num=x.size).astype(np.float32)
tvu = np.linspace(1, 2, num=x.size).astype(np.float32)
thu = np.linspace(0.5, 1, num=x.size).astype(np.float32)

smalldata3 = np.empty(len(x), dtype=dtyp)
smalldata3['x'] = x
smalldata3['y'] = y
smalldata3['z'] = z
smalldata3['tvu'] = tvu
smalldata3['thu'] = thu

x = np.arange(3000, 8000, 10, dtype=np.float64)
y = np.arange(52000, 57000, 10, dtype=np.float64)
x, y = np.meshgrid(x, y)
x = x.ravel()
y = y.ravel()
z = np.linspace(500, 5000, num=x.size).astype(np.float32)
tvu = np.linspace(1, 2, num=x.size).astype(np.float32)
thu = np.linspace(0.5, 1, num=x.size).astype(np.float32)

deepdata = np.empty(len(x), dtype=dtyp)
deepdata['x'] = x
deepdata['y'] = y
deepdata['z'] = z
deepdata['tvu'] = tvu
deepdata['thu'] = thu

x = np.arange(800, 1200, 100, dtype=np.float64)
y = np.arange(800, 1200, 100, dtype=np.float64)
x, y = np.meshgrid(x, y)
x = x.ravel()
y = y.ravel()
z = np.linspace(5, 30, num=x.size).astype(np.float32)
tvu = np.linspace(1, 2, num=x.size).astype(np.float32)
thu = np.linspace(0.5, 1, num=x.size).astype(np.float32)

closedata = np.empty(len(x), dtype=dtyp)
closedata['x'] = x
closedata['y'] = y
closedata['z'] = z
closedata['tvu'] = tvu
closedata['thu'] = thu

x = np.arange(800, 1200, 100, dtype=np.float64)
y = np.arange(800, 1200, 100, dtype=np.float64)
x, y = np.meshgrid(x, y)
x = x.ravel()
y = y.ravel()
z = np.linspace(5, 30, num=x.size).astype(np.float32)

dtyp = [('x', np.float64), ('y', np.float64), ('z', np.float32)]
onlyzdata = np.empty(len(x), dtype=dtyp)
onlyzdata['x'] = x
onlyzdata['y'] = y
onlyzdata['z'] = z

x = np.array([200, 250, 300, 350, 400, 450, 500, 550, 600, 650, 700, 750, 800, 400, 600])
y = np.array([600, 550, 500, 470, 440, 410, 400, 410, 440, 470, 500, 550, 600, 800, 800])
x = x.ravel()
y = y.ravel()
z = np.linspace(5, 30, num=x.size).astype(np.float32)
tvu = np.linspace(1, 2, num=x.size).astype(np.float32)
thu = np.linspace(0.5, 1, num=x.size).astype(np.float32)

dtyp = [('x', np.float64), ('y', np.float64), ('z', np.float32), ('tvu', np.float32), ('thu', np.float32)]
smileyface = np.empty(len(x), dtype=dtyp)
smileyface['x'] = x
smileyface['y'] = y
smileyface['z'] = z
smileyface['tvu'] = tvu
smileyface['thu'] = thu

x = np.array([-73.0024, -73.0022, -73.0020, -73.0018, -73.0016, -73.0014, -73.0012, -73.0010, -73.0008, -73.0006,
              -73.0004, -73.0002, -73.0000, -73.0016, -73.0008])
y = np.array([30.0008, 30.0006, 30.0004, 30.0003, 30.0002, 30.0001, 30.00005, 30.0001, 30.0002, 30.0003,
              30.0004, 30.0006, 30.0008, 30.0016, 30.0016])
x = x.ravel()
y = y.ravel()
z = np.linspace(5, 30, num=x.size).astype(np.float32)
tvu = np.linspace(1, 2, num=x.size).astype(np.float32)
thu = np.linspace(0.5, 1, num=x.size).astype(np.float32)

dtyp = [('x', np.float64), ('y', np.float64), ('z', np.float32), ('tvu', np.float32), ('thu', np.float32)]
geographicsmileyface = np.empty(len(x), dtype=dtyp)
geographicsmileyface['x'] = x
geographicsmileyface['y'] = y
geographicsmileyface['z'] = z
geographicsmileyface['tvu'] = tvu
geographicsmileyface['thu'] = thu

x = np.array([403744.696, 403749.213, 403755.808, 403752.612, 403752.063, 403753.335, 403756.806, 403762.371, 403769.667, 403750.526,
              403760.665, 403772.904, 403753.665, 403766.271, 403747.076, 403759.924, 403772.556, 403753.399, 403765.996, 403746.793,
              403759.568, 403772.297, 403753.139, 403765.836, 403746.559, 403759.398, 403772.035, 403752.963, 403765.575, 403746.372,
              403759.232, 403771.891, 403752.816, 403765.399, 403746.231, 403759.072, 403771.795, 403752.742, 403765.418, 403746.262,
              403759.19, 403771.887, 403752.772, 403765.547, 403746.428, 403759.22, 403771.829, 403752.805, 403765.564, 403746.427,
              403759.439, 403772.016, 403753.034, 403765.783, 403746.665, 403759.654, 403772.363, 403753.354, 403766.076, 403746.969,
              403759.874, 403772.595, 403753.572, 403766.38, 403747.299, 403760.272, 403772.994, 403754.003, 403766.773, 403747.722,
              403760.68, 403773.475, 403754.446, 403767.084, 403747.98, 403760.898, 403773.783, 403754.829, 403767.673, 403748.698,
              403761.673, 403774.447, 403755.515, 403768.351, 403749.385, 403762.349, 403775.227, 403756.334, 403769.05, 403750.103,
              403763.049, 403775.972, 403757.004, 403769.777, 403750.8, 403763.724, 403744.623, 403757.694, 403770.532, 403751.585,
              403764.407, 403745.35, 403758.295, 403771.029, 403752.105, 403764.897, 403745.741, 403758.698, 403771.522, 403752.588,
              403765.498, 403746.432, 403759.385, 403772.192, 403753.272, 403766.168, 403747.122, 403760.168, 403772.972, 403753.979,
              403766.806, 403747.725, 403760.663, 403773.47, 403754.477, 403767.263, 403748.293, 403761.257, 403774.144, 403755.166,
              403767.96, 403748.948, 403761.844, 403774.679, 403755.669, 403768.466, 403749.439, 403762.354, 403775.177, 403756.154,
              403768.968, 403749.922, 403762.741, 403775.518, 403756.46, 403769.177, 403750.106, 403763.047, 403775.842, 403756.772,
              403769.487, 403750.414, 403763.272, 403775.948, 403756.892, 403769.418, 403750.327, 403763.09, 403775.666, 403756.62,
              403769.286, 403750.157, 403762.94, 403775.566, 403756.423, 403769.11, 403749.962, 403762.766, 403775.42, 403756.267,
              403768.851, 403749.71, 403762.401, 403775.021, 403755.894, 403768.496, 403749.308, 403762.044, 403774.794, 403755.614,
              403768.233, 403749.032, 403761.584, 403774.147, 403754.849, 403767.403, 403748.143, 403760.748, 403773.411, 403754.168,
              403766.756, 403747.5, 403760.187, 403772.731, 403753.534, 403766.114, 403746.781, 403759.54, 403772.042, 403752.85,
              403765.472, 403746.158, 403758.784, 403771.298, 403752.083, 403764.819, 403745.494, 403758.121, 403770.646, 403751.352,
              403763.983, 403744.673, 403757.272, 403769.688, 403750.436, 403763.142, 403775.761, 403756.412, 403768.973, 403749.688,
              403762.399, 403775.013, 403755.776, 403768.332, 403749.04, 403761.742, 403774.338, 403754.986, 403767.569, 403748.249,
              403761.09, 403773.766, 403754.536, 403767.193, 403747.909, 403760.621, 403773.287, 403754.058])

y = np.array([4122687.998, 4122687.735, 4122687.837, 4122687.482, 4122687.288, 4122687.223, 4122687.292, 4122687.544, 4122687.917, 4122686.587,
              4122687.119, 4122687.796, 4122686.481, 4122687.206, 4122685.869, 4122686.583, 4122687.338, 4122686.008, 4122686.727, 4122685.372,
              4122686.131, 4122686.837, 4122685.525, 4122686.263, 4122684.913, 4122685.644, 4122686.396, 4122685.057, 4122685.778, 4122684.419,
              4122685.188, 4122685.972, 4122684.59, 4122685.326, 4122683.973, 4122684.698, 4122685.475, 4122684.127, 4122684.862, 4122683.497,
              4122684.281, 4122685.059, 4122683.669, 4122684.422, 4122683.067, 4122683.8, 4122684.555, 4122683.207, 4122683.956, 4122682.585,
              4122683.376, 4122684.16, 4122682.77, 4122683.525, 4122682.16, 4122682.911, 4122683.693, 4122682.332, 4122683.085, 4122681.707,
              4122682.499, 4122683.231, 4122681.887, 4122682.656, 4122681.286, 4122682.049, 4122682.831, 4122681.465, 4122682.223, 4122680.831,
              4122681.637, 4122682.388, 4122681.029, 4122681.797, 4122680.416, 4122681.17, 4122681.974, 4122680.607, 4122681.382, 4122680.04,
              4122680.797, 4122681.552, 4122680.181, 4122680.967, 4122679.59, 4122680.363, 4122681.164, 4122679.798, 4122680.571, 4122679.209,
              4122679.979, 4122680.76, 4122679.37, 4122680.167, 4122678.788, 4122679.551, 4122678.177, 4122678.983, 4122679.78, 4122678.395,
              4122679.167, 4122677.783, 4122678.543, 4122679.332, 4122677.959, 4122678.727, 4122677.337, 4122678.141, 4122678.944, 4122677.546,
              4122678.326, 4122676.942, 4122677.708, 4122678.507, 4122677.134, 4122677.908, 4122676.516, 4122677.324, 4122678.087, 4122676.73,
              4122677.511, 4122676.131, 4122676.881, 4122677.679, 4122676.304, 4122677.079, 4122675.745, 4122676.499, 4122677.252, 4122675.89,
              4122676.676, 4122675.303, 4122676.056, 4122676.853, 4122675.481, 4122676.269, 4122674.924, 4122675.658, 4122676.43, 4122675.056,
              4122675.839, 4122674.466, 4122675.209, 4122675.994, 4122674.622, 4122675.404, 4122674.051, 4122674.799, 4122675.559, 4122674.182,
              4122674.958, 4122673.589, 4122674.342, 4122675.114, 4122673.751, 4122674.51, 4122673.16, 4122673.882, 4122674.63, 4122673.265,
              4122674.036, 4122672.672, 4122673.398, 4122674.165, 4122672.802, 4122673.57, 4122672.23, 4122672.955, 4122673.692, 4122672.33,
              4122673.085, 4122671.732, 4122672.452, 4122673.216, 4122671.861, 4122672.607, 4122671.284, 4122671.985, 4122672.726, 4122671.38,
              4122672.135, 4122670.788, 4122671.474, 4122672.235, 4122670.878, 4122671.606, 4122670.224, 4122670.99, 4122671.702, 4122670.38,
              4122671.112, 4122669.756, 4122670.475, 4122671.241, 4122669.884, 4122670.595, 4122669.233, 4122669.99, 4122670.766, 4122669.391,
              4122670.113, 4122668.763, 4122669.453, 4122670.211, 4122668.865, 4122669.591, 4122668.252, 4122668.982, 4122669.738, 4122668.39,
              4122669.088, 4122667.746, 4122668.459, 4122669.199, 4122667.86, 4122668.547, 4122669.302, 4122667.956, 4122668.688, 4122667.376,
              4122668.068, 4122668.774, 4122667.444, 4122668.183, 4122666.851, 4122667.543, 4122668.287, 4122666.944, 4122667.659, 4122666.282,
              4122667.054, 4122667.773, 4122666.444, 4122667.187, 4122665.829, 4122666.531, 4122667.305, 4122665.949])

z = np.array([14.859, 14.885001, 14.860999, 14.901999, 14.873, 14.86, 14.850001, 14.794002, 14.72, 14.907001, 14.771998,
              14.72, 14.865001, 14.724002, 14.86, 14.776, 14.735999, 14.872001, 14.711001, 14.88, 14.819999, 14.747001,
              14.876998, 14.725001, 14.864001, 14.817, 14.740001, 14.894, 14.733001, 14.887, 14.886001, 14.774001,
              14.868999, 14.715999, 14.868999, 14.81, 14.746001, 14.886001, 14.717002, 14.874999, 14.843001, 14.736999,
              14.889998, 14.735999, 14.847999, 14.798999, 14.748, 14.883998, 14.729999, 14.879001, 14.795001, 14.734,
              14.881999, 14.738002, 14.869998, 14.7699995, 14.704001, 14.874999, 14.718001, 14.893001, 14.760001, 14.724002,
              14.886001, 14.708999, 14.886001, 14.686999, 14.725001, 14.848998, 14.708999, 14.878001, 14.780002, 14.715999,
              14.791999, 14.710002, 14.889998, 14.790999, 14.708999, 14.841998, 14.717002, 14.874, 14.740001, 14.7, 14.850001,
              14.706, 14.890998, 14.689002, 14.693999, 14.775001, 14.721999, 14.871001, 14.756, 14.738002, 14.824, 14.662002,
              14.869998, 14.727, 14.866, 14.840999, 14.738002, 14.876998, 14.717002, 14.847999, 14.797, 14.735, 14.853,
              14.707999, 14.857001, 14.812999, 14.731002, 14.873, 14.732001, 14.855998, 14.818, 14.705001, 14.890998, 14.7,
              14.857001, 14.775001, 14.713, 14.86, 14.775001, 14.854999, 14.775001, 14.710002, 14.858001, 14.705001, 14.825999,
              14.762, 14.687999, 14.853, 14.719001, 14.864001, 14.749, 14.707999, 14.844001, 14.726001, 14.853999, 14.811999,
              14.699, 14.86, 14.72, 14.874999, 14.736999, 14.714, 14.874999, 14.710002, 14.885001, 14.717002, 14.714, 14.837001,
              14.700999, 14.886001, 14.775001, 14.696002, 14.830001, 14.698001, 14.8759985, 14.697001, 14.668002, 14.822001,
              14.728999, 14.874999, 14.788001, 14.708999, 14.887, 14.714, 14.872001, 14.755, 14.714999, 14.820998, 14.708999,
              14.855998, 14.742999, 14.680999, 14.834998, 14.707999, 14.867, 14.735, 14.699, 14.840999, 14.703002, 14.869998,
              14.753001, 14.697001, 14.862998, 14.707, 14.840999, 14.731002, 14.692, 14.887, 14.697001, 14.822001, 14.784999,
              14.731002, 14.844001, 14.707999, 14.853999, 14.749, 14.696002, 14.865001, 14.719001, 14.820998, 14.780002,
              14.686999, 14.88, 14.714, 14.816001, 14.823001, 14.6900015, 14.832, 14.714, 14.783999, 14.809001, 14.656001,
              14.903998, 14.727, 14.696002, 14.840999, 14.7, 14.882998, 14.740001, 14.704001, 14.790999, 14.714, 14.874,
              14.747001, 14.692, 14.865001, 14.712001, 14.848998, 14.748, 14.701999, 14.818999, 14.693, 14.824, 14.752002,
              14.694999, 14.846])

tvu = np.array([0.2683417, 0.25604847, 0.2559847, 0.256046, 0.25304714, 0.25302914, 0.26003763, 0.27113, 0.25580946, 0.25442377,
                0.25426835, 0.25583276, 0.25198886, 0.25073913, 0.25204083, 0.25119853, 0.25194064, 0.25124562, 0.25117117,
                0.2513139, 0.2577917, 0.2512129, 0.25303024, 0.25291377, 0.25086424, 0.2558995, 0.25583094, 0.262535, 0.2519042, 0.28241506,
                0.2651969, 0.25772387, 0.25596604, 0.25189337, 0.25443092, 0.26229376, 0.25294554, 0.25199676, 0.25290212,
                0.25603476, 0.26796427, 0.25423363, 0.25303677, 0.2519084, 0.25307757, 0.25771093, 0.25765544, 0.25199166, 0.2529076,
                0.25791314, 0.262213, 0.2519277, 0.25783825, 0.2739916, 0.25086915, 0.25579786, 0.25076154, 0.6218818, 0.25189212, 0.26006448,
                0.25291768, 0.255766, 0.2512455, 0.2528826, 0.2578816, 0.25115725, 0.270583, 0.2577621, 0.2575332, 0.26801375,
                0.25119913, 0.2512114, 0.4034, 0.25188634, 0.25129926, 0.25580782, 0.25193, 0.25428566, 0.2518911, 0.25128177,
                0.25966927, 0.2529266, 0.25196153, 0.25960833, 0.2508401, 0.25749344, 0.25194612, 0.2853288, 0.25417447,
                0.25126892, 0.27394179, 0.25198957, 0.25770384, 0.25187385, 0.2559283, 0.25118148, 0.2531417, 0.25428727, 0.2519219,
                0.25995153, 0.25416997, 0.25135472, 0.25766924, 0.2529259, 0.25431243, 0.25189736, 0.25600997, 0.25195336, 0.2529319,
                0.25199598, 0.26462993, 0.25309527, 0.2648778, 0.26199308, 0.25595862, 0.25190187, 0.2513267, 0.27075824, 0.25193822,
                0.25433302, 0.27768716, 0.25438803, 0.255826, 0.25195247, 0.251258, 0.25419727, 0.25129974, 0.25766385, 0.25422776, 0.2543463,
                0.25120646, 0.25131077, 0.6321655, 0.2529786, 0.26796466, 0.25121954, 0.26002908, 0.29911307, 0.25069275,
                0.25305235, 0.2621178, 0.25441548, 0.25122806, 0.25128624, 0.27132612, 0.25194773, 0.2531088, 0.26476938, 0.25432876,
                0.25598058, 0.2507929, 0.25311768, 0.3414853, 0.2558848, 0.25786674, 0.25196075, 0.25208026, 0.3347477, 0.34602442, 0.25202626,
                0.25066456, 0.2513366, 0.3726785, 0.25087216, 0.31535074, 0.25299618, 0.25134906, 0.2577994, 0.2578122, 0.25204152,
                0.25429913, 0.2513446, 0.27809438, 0.25433746, 0.25309768, 0.2519906, 0.2521137, 0.25593236, 0.2678859, 0.25311556,
                0.25990096, 0.25452423, 0.25597173, 0.25203097, 0.253138, 0.25126898, 0.25615093, 0.26506755, 0.25202456,
                0.46637005, 0.2512684, 0.2521425, 0.25441816, 0.2520443, 0.25133917, 0.25200775, 0.25323093, 0.2624762, 0.25202516, 0.2561621,
                0.25201905, 0.25217998, 0.25795192, 0.25781602, 0.25619182, 0.2520181, 0.25099584, 0.2561018, 0.25128013,
                0.2521065, 0.25201827, 0.26028964, 0.25312024, 0.3243646, 0.25624067, 0.25787413, 0.25134283, 0.3157164, 0.2520177,
                0.25215042, 0.25600094, 0.26003498, 0.27494103, 0.2530493, 0.25094014, 0.26005965, 0.25785023, 0.25451323, 0.25998977,
                0.25139067, 0.25600135, 0.2513012, 0.25207397, 0.26501548, 0.25213808, 0.25438708, 0.25436276, 0.2627086])

thu = np.array([0.21762303, 0.16972324, 0.16138567, 0.16477162, 0.16178949, 0.16107178, 0.16207086, 0.15880568, 0.1628371 , 0.16504633,
                0.15885611, 0.16686939, 0.1599873 , 0.15880603, 0.16263731, 0.15880816, 0.16069901, 0.15935355, 0.15889752, 0.16057716,
                0.15936498, 0.15959173, 0.16123934, 0.1592193 , 0.15924644, 0.1592844 , 0.16556808, 0.17140543, 0.15899582, 0.24412553,
                0.1603825 , 0.16766176, 0.16473031, 0.1589746 , 0.17063002, 0.16025715, 0.16166668, 0.16032816, 0.15912466, 0.17558292,
                0.16084981, 0.16333115, 0.16151783, 0.15899374, 0.1663351 , 0.15963198, 0.16741966, 0.16033268, 0.15915157, 0.18097554,
                0.16000378, 0.16047437, 0.166647  , 0.16290876, 0.159271  , 0.15926781, 0.15900068, 0.4878663 , 0.15905833, 0.18563242,
                0.15897988, 0.1661033 , 0.1593915 , 0.15932626, 0.17893001, 0.1588362 , 0.1881586 , 0.1652354 , 0.16069755, 0.20280327,
                0.15882643, 0.15977158, 0.27881053, 0.15920158, 0.16040242, 0.15895385, 0.16108076, 0.16153689, 0.1593025 , 0.16025452,
                0.15886898, 0.163283  , 0.15963246, 0.16318005, 0.15913837, 0.15881093, 0.16166498, 0.17621832, 0.1609414 , 0.15998687,
                0.15894066, 0.16199325, 0.16159758, 0.15975314, 0.16803741, 0.15882644, 0.16841747, 0.15991396, 0.15995105, 0.17292897,
                0.15899628, 0.16108155, 0.16047896, 0.16106881, 0.16398074, 0.158916  , 0.17740583, 0.15906945, 0.16132283, 0.16053276,
                0.16052613, 0.16668628, 0.16073437, 0.17287508, 0.16472743, 0.15904562, 0.16065867, 0.16040948, 0.16070235, 0.16236432,
                0.16550729, 0.16920578, 0.15907505, 0.16087675, 0.15932879, 0.15987355, 0.16040172, 0.15899095, 0.1651594 , 0.16149333,
                0.15903953, 0.16026674, 0.16426672, 0.16327083, 0.16986763, 0.15908237, 0.1792124 , 0.15888095, 0.15881884, 0.16013041,
                0.16496073, 0.16653405, 0.15881924, 0.16009675, 0.16931869, 0.15955591, 0.16367175, 0.15884352, 0.16701093, 0.1612639 ,
                0.15890916, 0.16345902, 0.15925823, 0.1706326 , 0.16202988, 0.15960161, 0.16148952, 0.15898234, 0.3258452 , 0.15947422,
                0.15881923, 0.16004878, 0.15888683, 0.15913764, 0.19301087, 0.16006672, 0.16008969, 0.15881886, 0.17338182, 0.15956002,
                0.16059588, 0.1601447 , 0.15887734, 0.16592161, 0.16029723, 0.1593845 , 0.161976  , 0.15885991, 0.18959758, 0.16042572,
                0.16241682, 0.16781881, 0.15892689, 0.16104116, 0.16079311, 0.1589795 , 0.17329551, 0.15967612, 0.16075628, 0.34590375,
                0.1589354 , 0.16289867, 0.15916651, 0.16050942, 0.15949506, 0.15900034, 0.16668956, 0.16057386, 0.16027743, 0.16572519,
                0.15893267, 0.16365051, 0.16042529, 0.16538438, 0.16682644, 0.1588774 , 0.15940326, 0.16042095, 0.15927581, 0.16114064,
                0.15883173, 0.19598766, 0.15980767, 0.20345776, 0.16941902, 0.15881316, 0.16008002, 0.19504425, 0.15943971, 0.1618635 ,
                0.15883125, 0.17592508, 0.17502305, 0.15969498, 0.15918468, 0.1589986 , 0.17062865, 0.16189587, 0.16138458, 0.16048868,
                0.15906149, 0.15970042, 0.1600553 , 0.16215837, 0.16275184, 0.1590818 , 0.16383834, 0.17102021])
dtyp = [('x', np.float64), ('y', np.float64), ('z', np.float32), ('tvu', np.float32), ('thu', np.float32)]
realdata = np.empty(len(x), dtype=dtyp)
realdata['x'] = x
realdata['y'] = y
realdata['z'] = z
realdata['tvu'] = tvu
realdata['thu'] = thu


def get_grid_data():
    depth = np.linspace(10, 20, 20)
    tvu = np.linspace(1, 2, 20)
    thu = np.linspace(0.5, 1.5, 20)
    cell_indices = np.array([3, 1, 0, 2, 1, 0, 0, 7, 7, 2, 5, 4, 5, 4, 5, 6, 5, 6, 3, 3])
    grid = np.array([[np.nan, np.nan, np.nan], [np.nan, np.nan, np.nan], [np.nan, np.nan, np.nan]])
    density_grid = np.array([[0, 0, 0], [0, 0, 0], [0, 0, 0]])
    tvugrid = np.array([[np.nan, np.nan, np.nan], [np.nan, np.nan, np.nan], [np.nan, np.nan, np.nan]])
    thugrid = np.array([[np.nan, np.nan, np.nan], [np.nan, np.nan, np.nan], [np.nan, np.nan, np.nan]])
    return depth, tvu, thu, cell_indices, grid, density_grid, tvugrid, thugrid


def get_test_path():
    pth = os.path.join(os.path.dirname(__file__), 'grid')
    if os.path.exists(pth):
        remove_with_permissionserror(pth)
    return pth
